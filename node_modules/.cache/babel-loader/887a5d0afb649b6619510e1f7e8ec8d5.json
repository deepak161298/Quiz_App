{"ast":null,"code":"var _jsxFileName = \"/home/deepak/Videos/quiz-app/src/Pages/Question.jsx\",\n    _s = $RefreshSig$();\n\n// import React, { useState, useEffect } from \"react\";\n// import { Box, Button, CircularProgress, Typography } from \"@mui/material\";\n// import { decode } from \"html-entities\";\n// import Axios from \"../hooks/Axios\";\n// import { useSelector, useDispatch } from \"react-redux\";\n// import { useHistory } from \"react-router-dom\";\n// import { handleScoreChnage } from \"../Redux/action\";\n// //this function is for generating a random numbers\n// const getRandomInt = (max) => {\n//   return Math.floor(Math.random() * Math.floor(max));\n// };\n// const Question = () => {\n//   const {\n//     question_category,\n//     question_difficulty,\n//     question_type,\n//     amount_of_question,\n//     score,\n//   } = useSelector((state) => state);\n//   const history = useHistory();\n//   const dispatch = useDispatch();\n//   let apiUrl = `/api.php?amount=${amount_of_question}`;\n//   if (question_category) {\n//     apiUrl = apiUrl.concat(`&category=${question_category}`);\n//   }\n//   if (question_difficulty) {\n//     apiUrl = apiUrl.concat(`&difficulty=${question_difficulty}`);\n//   }\n//   if (question_type) {\n//     apiUrl = apiUrl.concat(`&type=${question_type}`);\n//   }\n//   const { response, loading } = Axios({ url: apiUrl });\n//   const [questionIndex, setQuestionIndex] = useState(0);\n//   const [options, setOptions] = useState([]);\n//   useEffect(() => {\n//     if (response?.results.length) {\n//       const question = response.results[questionIndex];\n//       let answers = [...question.incorrect_answers];\n//       answers.splice(\n//         getRandomInt(question.incorrect_answers.length),\n//         0,\n//         question.correct_answer\n//       );\n//       setOptions(answers);\n//     }\n//   }, [response, questionIndex]);\n//   if (loading) {\n//     return (\n//       <Box mt={20}>\n//         <CircularProgress />\n//       </Box>\n//     );\n//   }\n//   // This is for a answer button\n//   const handleClickAnswer = (event) => {\n//     const question = response.results[questionIndex];\n//     if (event.target.textContent === question.correct_answer) {\n//       dispatch(handleScoreChnage(score + 1));\n//     }\n//     if (questionIndex + 1 < response.result.length) {\n//       setQuestionIndex(questionIndex + 1);\n//     } else {\n//       history.push(\"/score\");\n//     }\n//   };\n//   return (\n//     <Box>\n//       <Typography variant=\"h4\">Questions {questionIndex + 1}</Typography>\n//       <Typography mt={5}>\n//         {decode(response.result[questionIndex].question)}\n//       </Typography>\n//       {options.map((data, id) => (\n//         <Box mt={2} key={id}>\n//           <Button onClick={handleClickAnswer} variant=\"contained\">\n//             {decode(data)}\n//           </Button>\n//         </Box>\n//       ))}\n//       <Box mt={5}>\n//         <Button>\n//           Score: {score} / {response.results.length}\n//         </Button>\n//       </Box>\n//     </Box>\n//   );\n// };\n// export default Question;\nimport React from \"react\";\nimport { Button, CircularProgress, Typography } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport { decode } from \"html-entities\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router\";\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport List from '@mui/material/List';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport useAxios from \"../hooks/Axios\";\nimport { handleScoreChnage, userAnswers } from \"../Redux/action\";\nimport { array } from \"yup\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst getRandomInt = max => {\n  return Math.floor(Math.random() * Math.floor(max));\n};\n\nconst Questions = () => {\n  _s();\n\n  const {\n    question_category,\n    question_difficulty,\n    question_type,\n    amount_of_question,\n    score,\n    name,\n    question_answers\n  } = useSelector(state => state);\n  const history = useHistory();\n  const dispatch = useDispatch();\n  let apiUrl = `/api.php?amount=${amount_of_question}`; // if (question_category) {\n  //   apiUrl = apiUrl.concat(`&category=${question_category}`);\n  // }\n  // if (question_difficulty) {\n  //   apiUrl = apiUrl.concat(`&difficulty=${question_difficulty}`);\n  // }\n  // if (question_type) {\n  //   apiUrl = apiUrl.concat(`&type=${question_type}`);\n  // }\n\n  useEffect(() => {\n    console.log(\"inital : \", question_answers);\n  }, []);\n  const {\n    response,\n    loading\n  } = useAxios({\n    url: apiUrl\n  });\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const [options, setOptions] = useState([]);\n  const [selectedIndex, setSelectedIndex] = React.useState(1);\n  const [enableNext, setEnableNext] = useState(false);\n  const [intialRender, setInitialRender] = useState(true);\n\n  const handleListItemClick = number => {\n    setSelectedIndex(number);\n  };\n\n  useEffect(() => {\n    if (question_answers !== null && question_answers !== void 0 && question_answers.length) {\n      const question = question_answers[questionIndex];\n      console.log(\"question \", question.answers);\n      let answers = [];\n\n      for (const [key, value] of Object.entries(question.answers)) {\n        console.log(\"values\", value);\n        if (value) answers.push({\n          [key]: value\n        });\n      }\n\n      answers.splice(getRandomInt(question.answers.length), 0 // question.correct_answer\n      );\n      setOptions(answers);\n    }\n  }, [question_answers, questionIndex]);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      mt: 20,\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this);\n  }\n\n  const handleClickAnswer = (name, next) => {\n    const question = question_answers[questionIndex];\n    name = JSON.stringify(name);\n\n    if (next && questionIndex + 1 < question_answers.length) {\n      console.log(name, \"+++++\", question.correct_answer);\n\n      if (name == question.correct_answer) {\n        alert(\"scorechange\");\n        dispatch(handleScoreChnage(score + 1));\n      }\n\n      alert(\"select\");\n      console.log(\"selected answer : \", name);\n      dispatch(userAnswers(name));\n      setInitialRender(true);\n      setQuestionIndex(questionIndex + 1);\n      setSelectedIndex(0);\n    } else if (name, next) {\n      alert(\"last\");\n      dispatch(userAnswers(name));\n      history.push(\"/score\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        children: [\"Welcome \", name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        children: [\"Questions \", questionIndex + 1 + \"/\" + question_answers.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        minWidth: 245\n      },\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          mt: 5,\n          children: question_answers[questionIndex].question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 11\n        }, this), options.map((data, id) => /*#__PURE__*/_jsxDEV(Box, {\n          mt: 2,\n          children: /*#__PURE__*/_jsxDEV(List, {\n            component: \"nav\",\n            \"aria-label\": \"main mailbox folders\",\n            children: /*#__PURE__*/_jsxDEV(ListItemButton, {\n              sx: {\n                border: \"1px solid black\"\n              },\n              name: Object.keys(data),\n              selected: !intialRender ? id === selectedIndex : false,\n              onClick: () => {\n                setInitialRender(false);\n                handleListItemClick(id);\n              },\n              children: /*#__PURE__*/_jsxDEV(ListItemText, {\n                primary: Object.values(data)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 256,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 15\n          }, this)\n        }, id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(Box, {\n          mt: 5,\n          children: [\"Score: \", score, \" / \", question_answers.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            display: \"flex\",\n            width: \"100%\",\n            justifyContent: \"space-between\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              disabled: intialRender,\n              onClick: e => {\n                handleClickAnswer(Object.keys(...options[selectedIndex]), true);\n              },\n              variant: \"contained\",\n              size: \"medium\",\n              children: questionIndex + 1 === question_answers.length ? \"SUBMIT\" : \"NEXT\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Questions, \"hlVId2eV9hW+muZP9JH8PLo5iyI=\", false, function () {\n  return [useSelector, useHistory, useDispatch, useAxios];\n});\n\n_c = Questions;\nexport default Questions;\n\nvar _c;\n\n$RefreshReg$(_c, \"Questions\");","map":{"version":3,"sources":["/home/deepak/Videos/quiz-app/src/Pages/Question.jsx"],"names":["React","Button","CircularProgress","Typography","Box","decode","useEffect","useState","useDispatch","useSelector","useHistory","Card","CardActions","CardContent","List","ListItemButton","ListItemIcon","ListItemText","useAxios","handleScoreChnage","userAnswers","array","getRandomInt","max","Math","floor","random","Questions","question_category","question_difficulty","question_type","amount_of_question","score","name","question_answers","state","history","dispatch","apiUrl","console","log","response","loading","url","questionIndex","setQuestionIndex","options","setOptions","selectedIndex","setSelectedIndex","enableNext","setEnableNext","intialRender","setInitialRender","handleListItemClick","number","length","question","answers","key","value","Object","entries","push","splice","handleClickAnswer","next","JSON","stringify","correct_answer","alert","minWidth","map","data","id","border","keys","values","e"],"mappings":"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","sourcesContent":["// import React, { useState, useEffect } from \"react\";\n\n// import { Box, Button, CircularProgress, Typography } from \"@mui/material\";\n\n// import { decode } from \"html-entities\";\n\n// import Axios from \"../hooks/Axios\";\n\n// import { useSelector, useDispatch } from \"react-redux\";\n// import { useHistory } from \"react-router-dom\";\n\n// import { handleScoreChnage } from \"../Redux/action\";\n\n// //this function is for generating a random numbers\n\n// const getRandomInt = (max) => {\n//   return Math.floor(Math.random() * Math.floor(max));\n// };\n\n// const Question = () => {\n//   const {\n//     question_category,\n//     question_difficulty,\n//     question_type,\n//     amount_of_question,\n//     score,\n//   } = useSelector((state) => state);\n\n//   const history = useHistory();\n//   const dispatch = useDispatch();\n\n//   let apiUrl = `/api.php?amount=${amount_of_question}`;\n\n//   if (question_category) {\n//     apiUrl = apiUrl.concat(`&category=${question_category}`);\n//   }\n\n//   if (question_difficulty) {\n//     apiUrl = apiUrl.concat(`&difficulty=${question_difficulty}`);\n//   }\n\n//   if (question_type) {\n//     apiUrl = apiUrl.concat(`&type=${question_type}`);\n//   }\n\n//   const { response, loading } = Axios({ url: apiUrl });\n\n//   const [questionIndex, setQuestionIndex] = useState(0);\n//   const [options, setOptions] = useState([]);\n\n//   useEffect(() => {\n//     if (response?.results.length) {\n//       const question = response.results[questionIndex];\n\n//       let answers = [...question.incorrect_answers];\n\n//       answers.splice(\n//         getRandomInt(question.incorrect_answers.length),\n//         0,\n//         question.correct_answer\n//       );\n//       setOptions(answers);\n//     }\n//   }, [response, questionIndex]);\n\n//   if (loading) {\n//     return (\n//       <Box mt={20}>\n//         <CircularProgress />\n//       </Box>\n//     );\n//   }\n\n//   // This is for a answer button\n//   const handleClickAnswer = (event) => {\n//     const question = response.results[questionIndex];\n\n//     if (event.target.textContent === question.correct_answer) {\n//       dispatch(handleScoreChnage(score + 1));\n//     }\n//     if (questionIndex + 1 < response.result.length) {\n//       setQuestionIndex(questionIndex + 1);\n//     } else {\n//       history.push(\"/score\");\n//     }\n//   };\n\n//   return (\n//     <Box>\n//       <Typography variant=\"h4\">Questions {questionIndex + 1}</Typography>\n//       <Typography mt={5}>\n//         {decode(response.result[questionIndex].question)}\n//       </Typography>\n//       {options.map((data, id) => (\n//         <Box mt={2} key={id}>\n//           <Button onClick={handleClickAnswer} variant=\"contained\">\n//             {decode(data)}\n//           </Button>\n//         </Box>\n//       ))}\n//       <Box mt={5}>\n//         <Button>\n//           Score: {score} / {response.results.length}\n//         </Button>\n//       </Box>\n//     </Box>\n//   );\n// };\n\n// export default Question;\nimport React from \"react\";\nimport { Button, CircularProgress, Typography } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\n\nimport { decode } from \"html-entities\";\n\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router\";\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport List from '@mui/material/List';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport useAxios from \"../hooks/Axios\";\n\nimport { handleScoreChnage,userAnswers } from \"../Redux/action\";\nimport { array } from \"yup\";\n\nconst getRandomInt = (max) => {\n  return Math.floor(Math.random() * Math.floor(max));\n};\n\nconst Questions = () => {\n  const {\n    question_category,\n    question_difficulty,\n    question_type,\n    amount_of_question,\n    score,\n    name,\n    question_answers\n  } = useSelector((state) => state);\n\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  let apiUrl = `/api.php?amount=${amount_of_question}`;\n\n  // if (question_category) {\n  //   apiUrl = apiUrl.concat(`&category=${question_category}`);\n  // }\n\n  // if (question_difficulty) {\n  //   apiUrl = apiUrl.concat(`&difficulty=${question_difficulty}`);\n  // }\n\n  // if (question_type) {\n  //   apiUrl = apiUrl.concat(`&type=${question_type}`);\n  // }\n  useEffect(() => {\n    console.log(\"inital : \", question_answers)\n  }, [])\n\n  const { response, loading } = useAxios({ url: apiUrl });\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const [options, setOptions] = useState([]);\n  const [selectedIndex, setSelectedIndex] = React.useState(1);\n  const [enableNext, setEnableNext] = useState(false)\n  const [intialRender, setInitialRender] = useState(true)\n\n  const handleListItemClick = (\n    number\n  ) => {\n    setSelectedIndex(number);\n  };\n  useEffect(() => {\n    if (question_answers?.length) {\n      const question = question_answers[questionIndex];\n      console.log(\"question \", question.answers)\n      let answers = []\n      for (const [key, value] of Object.entries(question.answers)) {\n        console.log(\"values\", value);\n\n        if (value)\n          answers.push({\n            [key]: value\n          })\n      }\n      answers.splice(\n        getRandomInt(question.answers.length),\n        0,\n        // question.correct_answer\n      );\n      setOptions(answers);\n    }\n  }, [question_answers, questionIndex]);\n\n  if (loading) {\n    return (\n      <Box mt={20}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  const handleClickAnswer = (name, next) => {\n    const question = question_answers[questionIndex];\n   name = JSON.stringify(name)\n    \n\n    if (next && questionIndex + 1 < question_answers.length) {\n      console.log(name,\"+++++\",question.correct_answer);\n\n      if (name == question.correct_answer) {\n        alert(\"scorechange\")\n        dispatch(handleScoreChnage(score + 1));\n      }\n      alert(\"select\") \n      console.log(\"selected answer : \",name)\n      dispatch(userAnswers(name))\n      setInitialRender(true)\n      setQuestionIndex(questionIndex + 1);\n      setSelectedIndex(0)\n    } else if (name,next) {\n      alert(\"last\") \n      dispatch(userAnswers(name))\n      history.push(\"/score\");\n    }\n  };\n\n  return (\n    <>\n      <Box display={\"flex\"} justifyContent={\"space-between\"}>\n        <Typography variant=\"h4\">Welcome {name}</Typography>\n        <Typography variant=\"h4\">Questions {questionIndex + 1 + \"/\" + question_answers.length}</Typography>\n      </Box>\n      <Card sx={{ minWidth: 245 }}>\n        <CardContent>\n          <Typography mt={5}>\n            {/* {decode(response.results[questionIndex].question)} */}\n            {question_answers[questionIndex].question}\n          </Typography>\n          {options.map((data, id) => (\n            <Box mt={2} key={id}>\n              <List component=\"nav\" aria-label=\"main mailbox folders\">\n                <ListItemButton sx={{ border: \"1px solid black\" }} name={Object.keys(data)}\n                  selected={!intialRender ? id === selectedIndex : false}\n                  onClick={() => {\n                    setInitialRender(false);\n                    handleListItemClick(id);\n                  }}\n                >\n                  <ListItemText primary={Object.values(data)} />\n                </ListItemButton>\n              </List>\n              {/* <Button name={Object.keys(data)} onClick={handleClickAnswer} variant=\"contained\">\n            {Object.values(data)}\n          </Button> */}\n            </Box>\n          ))}\n          <Box mt={5}>\n            Score: {score} / {question_answers.length}\n          </Box>\n          <CardActions >\n            <Box display={\"flex\"} width={\"100%\"} justifyContent={\"space-between\"}>\n              {/* <Button variant=\"contained\" size=\"medium\">PREV</Button> */}\n              <Button disabled={intialRender} onClick={(e) => { handleClickAnswer(Object.keys(...options[selectedIndex]), true) }} variant=\"contained\" size=\"medium\">\n                {questionIndex + 1 === question_answers.length ? \"SUBMIT\" : \"NEXT\"}\n              </Button>\n            </Box>\n          </CardActions>\n        </CardContent>\n      </Card>\n    </>\n  );\n};\n\nexport default Questions;\n"]},"metadata":{},"sourceType":"module"}