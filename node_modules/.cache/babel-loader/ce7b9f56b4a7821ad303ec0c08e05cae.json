{"ast":null,"code":"var _jsxFileName = \"/home/deepak/Videos/quiz-app/src/Pages/Question.jsx\",\n    _s = $RefreshSig$();\n\n// import React, { useState, useEffect } from \"react\";\n// import { Box, Button, CircularProgress, Typography } from \"@mui/material\";\n// import { decode } from \"html-entities\";\n// import Axios from \"../hooks/Axios\";\n// import { useSelector, useDispatch } from \"react-redux\";\n// import { useHistory } from \"react-router-dom\";\n// import { handleScoreChnage } from \"../Redux/action\";\n// //this function is for generating a random numbers\n// const getRandomInt = (max) => {\n//   return Math.floor(Math.random() * Math.floor(max));\n// };\n// const Question = () => {\n//   const {\n//     question_category,\n//     question_difficulty,\n//     question_type,\n//     amount_of_question,\n//     score,\n//   } = useSelector((state) => state);\n//   const history = useHistory();\n//   const dispatch = useDispatch();\n//   let apiUrl = `/api.php?amount=${amount_of_question}`;\n//   if (question_category) {\n//     apiUrl = apiUrl.concat(`&category=${question_category}`);\n//   }\n//   if (question_difficulty) {\n//     apiUrl = apiUrl.concat(`&difficulty=${question_difficulty}`);\n//   }\n//   if (question_type) {\n//     apiUrl = apiUrl.concat(`&type=${question_type}`);\n//   }\n//   const { response, loading } = Axios({ url: apiUrl });\n//   const [questionIndex, setQuestionIndex] = useState(0);\n//   const [options, setOptions] = useState([]);\n//   useEffect(() => {\n//     if (response?.results.length) {\n//       const question = response.results[questionIndex];\n//       let answers = [...question.incorrect_answers];\n//       answers.splice(\n//         getRandomInt(question.incorrect_answers.length),\n//         0,\n//         question.correct_answer\n//       );\n//       setOptions(answers);\n//     }\n//   }, [response, questionIndex]);\n//   if (loading) {\n//     return (\n//       <Box mt={20}>\n//         <CircularProgress />\n//       </Box>\n//     );\n//   }\n//   // This is for a answer button\n//   const handleClickAnswer = (event) => {\n//     const question = response.results[questionIndex];\n//     if (event.target.textContent === question.correct_answer) {\n//       dispatch(handleScoreChnage(score + 1));\n//     }\n//     if (questionIndex + 1 < response.result.length) {\n//       setQuestionIndex(questionIndex + 1);\n//     } else {\n//       history.push(\"/score\");\n//     }\n//   };\n//   return (\n//     <Box>\n//       <Typography variant=\"h4\">Questions {questionIndex + 1}</Typography>\n//       <Typography mt={5}>\n//         {decode(response.result[questionIndex].question)}\n//       </Typography>\n//       {options.map((data, id) => (\n//         <Box mt={2} key={id}>\n//           <Button onClick={handleClickAnswer} variant=\"contained\">\n//             {decode(data)}\n//           </Button>\n//         </Box>\n//       ))}\n//       <Box mt={5}>\n//         <Button>\n//           Score: {score} / {response.results.length}\n//         </Button>\n//       </Box>\n//     </Box>\n//   );\n// };\n// export default Question;\nimport { Button, CircularProgress, Typography } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport { decode } from \"html-entities\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router\";\nimport useAxios from \"../hooks/Axios\";\nimport { handleScoreChnage } from \"../Redux/action\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getRandomInt = max => {\n  return Math.floor(Math.random() * Math.floor(max));\n};\n\nconst Questions = () => {\n  _s();\n\n  const {\n    question_category,\n    question_difficulty,\n    question_type,\n    amount_of_question,\n    score,\n    question_answers\n  } = useSelector(state => state);\n  const history = useHistory();\n  const dispatch = useDispatch();\n  let apiUrl = `/api.php?amount=${amount_of_question}`; // if (question_category) {\n  //   apiUrl = apiUrl.concat(`&category=${question_category}`);\n  // }\n  // if (question_difficulty) {\n  //   apiUrl = apiUrl.concat(`&difficulty=${question_difficulty}`);\n  // }\n  // if (question_type) {\n  //   apiUrl = apiUrl.concat(`&type=${question_type}`);\n  // }\n\n  useEffect(() => {\n    console.log(\"inital : \", question_answers);\n  }, []);\n  const {\n    response,\n    loading\n  } = useAxios({\n    url: apiUrl\n  });\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const [options, setOptions] = useState([]);\n  useEffect(() => {\n    if (response !== null && response !== void 0 && response.results.length) {\n      const question = question_answers[questionIndex];\n      let answers = [...question.correct_answers];\n      answers.splice(getRandomInt(question.incorrect_answers.length), 0, question.correct_answer);\n      setOptions(answers);\n    }\n  }, [response, questionIndex]);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      mt: 20,\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this);\n  }\n\n  const handleClickAnswer = event => {\n    const question = response.results[questionIndex];\n\n    if (event.target.textContent === question.correct_answer) {\n      dispatch(handleScoreChnage(score + 1));\n    }\n\n    if (questionIndex + 1 < response.results.length) {\n      setQuestionIndex(questionIndex + 1);\n    } else {\n      history.push(\"/score\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      children: [\"Questions \", questionIndex + 1 + \"/\" + question_answers.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      mt: 5,\n      children: question_answers[questionIndex].question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this), options.map((data, id) => /*#__PURE__*/_jsxDEV(Box, {\n      mt: 2,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleClickAnswer,\n        variant: \"contained\",\n        children: decode(data)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 11\n      }, this)\n    }, id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 5,\n      children: [\"Score: \", score, \" / \", response.results.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 198,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Questions, \"JTrzHVHznD6YoKIbtRc9JUirpZA=\", false, function () {\n  return [useSelector, useHistory, useDispatch, useAxios];\n});\n\n_c = Questions;\nexport default Questions;\n\nvar _c;\n\n$RefreshReg$(_c, \"Questions\");","map":{"version":3,"sources":["/home/deepak/Videos/quiz-app/src/Pages/Question.jsx"],"names":["Button","CircularProgress","Typography","Box","decode","useEffect","useState","useDispatch","useSelector","useHistory","useAxios","handleScoreChnage","getRandomInt","max","Math","floor","random","Questions","question_category","question_difficulty","question_type","amount_of_question","score","question_answers","state","history","dispatch","apiUrl","console","log","response","loading","url","questionIndex","setQuestionIndex","options","setOptions","results","length","question","answers","correct_answers","splice","incorrect_answers","correct_answer","handleClickAnswer","event","target","textContent","push","map","data","id"],"mappings":"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","sourcesContent":["// import React, { useState, useEffect } from \"react\";\n\n// import { Box, Button, CircularProgress, Typography } from \"@mui/material\";\n\n// import { decode } from \"html-entities\";\n\n// import Axios from \"../hooks/Axios\";\n\n// import { useSelector, useDispatch } from \"react-redux\";\n// import { useHistory } from \"react-router-dom\";\n\n// import { handleScoreChnage } from \"../Redux/action\";\n\n// //this function is for generating a random numbers\n\n// const getRandomInt = (max) => {\n//   return Math.floor(Math.random() * Math.floor(max));\n// };\n\n// const Question = () => {\n//   const {\n//     question_category,\n//     question_difficulty,\n//     question_type,\n//     amount_of_question,\n//     score,\n//   } = useSelector((state) => state);\n\n//   const history = useHistory();\n//   const dispatch = useDispatch();\n\n//   let apiUrl = `/api.php?amount=${amount_of_question}`;\n\n//   if (question_category) {\n//     apiUrl = apiUrl.concat(`&category=${question_category}`);\n//   }\n\n//   if (question_difficulty) {\n//     apiUrl = apiUrl.concat(`&difficulty=${question_difficulty}`);\n//   }\n\n//   if (question_type) {\n//     apiUrl = apiUrl.concat(`&type=${question_type}`);\n//   }\n\n//   const { response, loading } = Axios({ url: apiUrl });\n\n//   const [questionIndex, setQuestionIndex] = useState(0);\n//   const [options, setOptions] = useState([]);\n\n//   useEffect(() => {\n//     if (response?.results.length) {\n//       const question = response.results[questionIndex];\n\n//       let answers = [...question.incorrect_answers];\n\n//       answers.splice(\n//         getRandomInt(question.incorrect_answers.length),\n//         0,\n//         question.correct_answer\n//       );\n//       setOptions(answers);\n//     }\n//   }, [response, questionIndex]);\n\n//   if (loading) {\n//     return (\n//       <Box mt={20}>\n//         <CircularProgress />\n//       </Box>\n//     );\n//   }\n\n//   // This is for a answer button\n//   const handleClickAnswer = (event) => {\n//     const question = response.results[questionIndex];\n\n//     if (event.target.textContent === question.correct_answer) {\n//       dispatch(handleScoreChnage(score + 1));\n//     }\n//     if (questionIndex + 1 < response.result.length) {\n//       setQuestionIndex(questionIndex + 1);\n//     } else {\n//       history.push(\"/score\");\n//     }\n//   };\n\n//   return (\n//     <Box>\n//       <Typography variant=\"h4\">Questions {questionIndex + 1}</Typography>\n//       <Typography mt={5}>\n//         {decode(response.result[questionIndex].question)}\n//       </Typography>\n//       {options.map((data, id) => (\n//         <Box mt={2} key={id}>\n//           <Button onClick={handleClickAnswer} variant=\"contained\">\n//             {decode(data)}\n//           </Button>\n//         </Box>\n//       ))}\n//       <Box mt={5}>\n//         <Button>\n//           Score: {score} / {response.results.length}\n//         </Button>\n//       </Box>\n//     </Box>\n//   );\n// };\n\n// export default Question;\n\nimport { Button, CircularProgress, Typography } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\n\nimport { decode } from \"html-entities\";\n\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router\";\n\nimport useAxios from \"../hooks/Axios\";\n\nimport { handleScoreChnage } from \"../Redux/action\";\n\nconst getRandomInt = (max) => {\n  return Math.floor(Math.random() * Math.floor(max));\n};\n\nconst Questions = () => {\n  const {\n    question_category,\n    question_difficulty,\n    question_type,\n    amount_of_question,\n    score,\n    question_answers\n  } = useSelector((state) => state);\n\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  let apiUrl = `/api.php?amount=${amount_of_question}`;\n\n  // if (question_category) {\n  //   apiUrl = apiUrl.concat(`&category=${question_category}`);\n  // }\n\n  // if (question_difficulty) {\n  //   apiUrl = apiUrl.concat(`&difficulty=${question_difficulty}`);\n  // }\n\n  // if (question_type) {\n  //   apiUrl = apiUrl.concat(`&type=${question_type}`);\n  // }\n  useEffect(()=>{\nconsole.log(\"inital : \",question_answers)\n  },[])\n\n  const {response, loading } = useAxios({ url: apiUrl });\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const [options, setOptions] = useState([]);\n\n  useEffect(() => {\n    if (response?.results.length) {\n      const question = question_answers[questionIndex];\n      let answers = [...question.correct_answers];\n      answers.splice(\n        getRandomInt(question.incorrect_answers.length),\n        0,\n        question.correct_answer\n      );\n      setOptions(answers);\n    }\n  }, [response, questionIndex]);\n\n  if (loading) {\n    return (\n      <Box mt={20}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  const handleClickAnswer = (event) => {\n    const question = response.results[questionIndex];\n    if (event.target.textContent === question.correct_answer) {\n      dispatch(handleScoreChnage(score + 1));\n    }\n\n    if (questionIndex + 1 < response.results.length) {\n      setQuestionIndex(questionIndex + 1);\n    } else {\n      history.push(\"/score\");\n    }\n  };\n\n  return (\n    <Box>\n      <Typography variant=\"h4\">Questions {questionIndex + 1 +\"/\"+question_answers.length}</Typography>\n      <Typography mt={5}>\n        {/* {decode(response.results[questionIndex].question)} */}\n        {question_answers[questionIndex].question}\n      </Typography>\n      {options.map((data, id) => (\n        <Box mt={2} key={id}>\n          <Button onClick={handleClickAnswer} variant=\"contained\">\n            {decode(data)}\n          </Button>\n        </Box>\n      ))}\n      <Box mt={5}>\n        Score: {score} / {response.results.length}\n      </Box>\n    </Box>\n  );\n};\n\nexport default Questions;\n"]},"metadata":{},"sourceType":"module"}