{"ast":null,"code":"var reWords = /[A-Z\\xc0-\\xd6\\xd8-\\xde]?[a-z\\xdf-\\xf6\\xf8-\\xff]+(?:['’](?:d|ll|m|re|s|t|ve))?(?=[\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000]|[A-Z\\xc0-\\xd6\\xd8-\\xde]|$)|(?:[A-Z\\xc0-\\xd6\\xd8-\\xde]|[^\\ud800-\\udfff\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde])+(?:['’](?:D|LL|M|RE|S|T|VE))?(?=[\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000]|[A-Z\\xc0-\\xd6\\xd8-\\xde](?:[a-z\\xdf-\\xf6\\xf8-\\xff]|[^\\ud800-\\udfff\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde])|$)|[A-Z\\xc0-\\xd6\\xd8-\\xde]?(?:[a-z\\xdf-\\xf6\\xf8-\\xff]|[^\\ud800-\\udfff\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde])+(?:['’](?:d|ll|m|re|s|t|ve))?|[A-Z\\xc0-\\xd6\\xd8-\\xde]+(?:['’](?:D|LL|M|RE|S|T|VE))?|\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])|\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])|\\d+|(?:[\\u2700-\\u27bf]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff])[\\ufe0e\\ufe0f]?(?:[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]|\\ud83c[\\udffb-\\udfff])?(?:\\u200d(?:[^\\ud800-\\udfff]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff])[\\ufe0e\\ufe0f]?(?:[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]|\\ud83c[\\udffb-\\udfff])?)*/g;\n\nvar words = function words(str) {\n  return str.match(reWords) || [];\n};\n\nvar upperFirst = function upperFirst(str) {\n  return str[0].toUpperCase() + str.slice(1);\n};\n\nvar join = function join(str, d) {\n  return words(str).join(d).toLowerCase();\n};\n\nvar camelCase = function camelCase(str) {\n  return words(str).reduce(function (acc, next) {\n    return \"\".concat(acc).concat(!acc ? next.toLowerCase() : next[0].toUpperCase() + next.slice(1).toLowerCase());\n  }, '');\n};\n\nvar pascalCase = function pascalCase(str) {\n  return upperFirst(camelCase(str));\n};\n\nvar snakeCase = function snakeCase(str) {\n  return join(str, '_');\n};\n\nvar kebabCase = function kebabCase(str) {\n  return join(str, '-');\n};\n\nvar sentenceCase = function sentenceCase(str) {\n  return upperFirst(join(str, ' '));\n};\n\nvar titleCase = function titleCase(str) {\n  return words(str).map(upperFirst).join(' ');\n};\n\nmodule.exports = {\n  words: words,\n  upperFirst: upperFirst,\n  camelCase: camelCase,\n  pascalCase: pascalCase,\n  snakeCase: snakeCase,\n  kebabCase: kebabCase,\n  sentenceCase: sentenceCase,\n  titleCase: titleCase\n};","map":{"version":3,"sources":["/home/deepak/Videos/quiz-app/node_modules/tiny-case/index.js"],"names":["reWords","words","str","match","upperFirst","toUpperCase","slice","join","d","toLowerCase","camelCase","reduce","acc","next","pascalCase","snakeCase","kebabCase","sentenceCase","titleCase","map","module","exports"],"mappings":"AAAA,IAAMA,OAAO,GAAG,m9DAAhB;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,GAAD;AAAA,SAASA,GAAG,CAACC,KAAJ,CAAUH,OAAV,KAAsB,EAA/B;AAAA,CAAd;;AAEA,IAAMI,UAAU,GAAG,SAAbA,UAAa,CAACF,GAAD;AAAA,SAASA,GAAG,CAAC,CAAD,CAAH,CAAOG,WAAP,KAAuBH,GAAG,CAACI,KAAJ,CAAU,CAAV,CAAhC;AAAA,CAAnB;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAACL,GAAD,EAAMM,CAAN;AAAA,SAAYP,KAAK,CAACC,GAAD,CAAL,CAAWK,IAAX,CAAgBC,CAAhB,EAAmBC,WAAnB,EAAZ;AAAA,CAAb;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACR,GAAD;AAAA,SAChBD,KAAK,CAACC,GAAD,CAAL,CAAWS,MAAX,CACE,UAACC,GAAD,EAAMC,IAAN;AAAA,qBACKD,GADL,SAEI,CAACA,GAAD,GACIC,IAAI,CAACJ,WAAL,EADJ,GAEII,IAAI,CAAC,CAAD,CAAJ,CAAQR,WAAR,KAAwBQ,IAAI,CAACP,KAAL,CAAW,CAAX,EAAcG,WAAd,EAJhC;AAAA,GADF,EAOE,EAPF,CADgB;AAAA,CAAlB;;AAWA,IAAMK,UAAU,GAAG,SAAbA,UAAa,CAACZ,GAAD;AAAA,SAASE,UAAU,CAACM,SAAS,CAACR,GAAD,CAAV,CAAnB;AAAA,CAAnB;;AAEA,IAAMa,SAAS,GAAG,SAAZA,SAAY,CAACb,GAAD;AAAA,SAASK,IAAI,CAACL,GAAD,EAAM,GAAN,CAAb;AAAA,CAAlB;;AAEA,IAAMc,SAAS,GAAG,SAAZA,SAAY,CAACd,GAAD;AAAA,SAASK,IAAI,CAACL,GAAD,EAAM,GAAN,CAAb;AAAA,CAAlB;;AAEA,IAAMe,YAAY,GAAG,SAAfA,YAAe,CAACf,GAAD;AAAA,SAASE,UAAU,CAACG,IAAI,CAACL,GAAD,EAAM,GAAN,CAAL,CAAnB;AAAA,CAArB;;AAEA,IAAMgB,SAAS,GAAG,SAAZA,SAAY,CAAChB,GAAD;AAAA,SAASD,KAAK,CAACC,GAAD,CAAL,CAAWiB,GAAX,CAAef,UAAf,EAA2BG,IAA3B,CAAgC,GAAhC,CAAT;AAAA,CAAlB;;AAEAa,MAAM,CAACC,OAAP,GAAiB;AACfpB,EAAAA,KAAK,EAALA,KADe;AAEfG,EAAAA,UAAU,EAAVA,UAFe;AAGfM,EAAAA,SAAS,EAATA,SAHe;AAIfI,EAAAA,UAAU,EAAVA,UAJe;AAKfC,EAAAA,SAAS,EAATA,SALe;AAMfC,EAAAA,SAAS,EAATA,SANe;AAOfC,EAAAA,YAAY,EAAZA,YAPe;AAQfC,EAAAA,SAAS,EAATA;AARe,CAAjB","sourcesContent":["const reWords = /[A-Z\\xc0-\\xd6\\xd8-\\xde]?[a-z\\xdf-\\xf6\\xf8-\\xff]+(?:['’](?:d|ll|m|re|s|t|ve))?(?=[\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000]|[A-Z\\xc0-\\xd6\\xd8-\\xde]|$)|(?:[A-Z\\xc0-\\xd6\\xd8-\\xde]|[^\\ud800-\\udfff\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde])+(?:['’](?:D|LL|M|RE|S|T|VE))?(?=[\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000]|[A-Z\\xc0-\\xd6\\xd8-\\xde](?:[a-z\\xdf-\\xf6\\xf8-\\xff]|[^\\ud800-\\udfff\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde])|$)|[A-Z\\xc0-\\xd6\\xd8-\\xde]?(?:[a-z\\xdf-\\xf6\\xf8-\\xff]|[^\\ud800-\\udfff\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde])+(?:['’](?:d|ll|m|re|s|t|ve))?|[A-Z\\xc0-\\xd6\\xd8-\\xde]+(?:['’](?:D|LL|M|RE|S|T|VE))?|\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])|\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])|\\d+|(?:[\\u2700-\\u27bf]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff])[\\ufe0e\\ufe0f]?(?:[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]|\\ud83c[\\udffb-\\udfff])?(?:\\u200d(?:[^\\ud800-\\udfff]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff])[\\ufe0e\\ufe0f]?(?:[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]|\\ud83c[\\udffb-\\udfff])?)*/g\n\nconst words = (str) => str.match(reWords) || []\n\nconst upperFirst = (str) => str[0].toUpperCase() + str.slice(1)\n\nconst join = (str, d) => words(str).join(d).toLowerCase()\n\nconst camelCase = (str) =>\n  words(str).reduce(\n    (acc, next) =>\n      `${acc}${\n        !acc\n          ? next.toLowerCase()\n          : next[0].toUpperCase() + next.slice(1).toLowerCase()\n      }`,\n    '',\n  )\n\nconst pascalCase = (str) => upperFirst(camelCase(str))\n\nconst snakeCase = (str) => join(str, '_')\n\nconst kebabCase = (str) => join(str, '-')\n\nconst sentenceCase = (str) => upperFirst(join(str, ' '))\n\nconst titleCase = (str) => words(str).map(upperFirst).join(' ')\n\nmodule.exports = {\n  words,\n  upperFirst,\n  camelCase,\n  pascalCase,\n  snakeCase,\n  kebabCase,\n  sentenceCase,\n  titleCase,\n}\n"]},"metadata":{},"sourceType":"script"}