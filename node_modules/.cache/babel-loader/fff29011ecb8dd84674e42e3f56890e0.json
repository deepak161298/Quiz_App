{"ast":null,"code":"var _jsxFileName = \"/home/deepak/Videos/quiz-app/src/Pages/Question.jsx\",\n    _s = $RefreshSig$();\n\n// import React, { useState, useEffect } from \"react\";\n// import { Box, Button, CircularProgress, Typography } from \"@mui/material\";\n// import { decode } from \"html-entities\";\n// import Axios from \"../hooks/Axios\";\n// import { useSelector, useDispatch } from \"react-redux\";\n// import { useHistory } from \"react-router-dom\";\n// import { handleScoreChnage } from \"../Redux/action\";\n// //this function is for generating a random numbers\n// const getRandomInt = (max) => {\n//   return Math.floor(Math.random() * Math.floor(max));\n// };\n// const Question = () => {\n//   const {\n//     question_category,\n//     question_difficulty,\n//     question_type,\n//     amount_of_question,\n//     score,\n//   } = useSelector((state) => state);\n//   const history = useHistory();\n//   const dispatch = useDispatch();\n//   let apiUrl = `/api.php?amount=${amount_of_question}`;\n//   if (question_category) {\n//     apiUrl = apiUrl.concat(`&category=${question_category}`);\n//   }\n//   if (question_difficulty) {\n//     apiUrl = apiUrl.concat(`&difficulty=${question_difficulty}`);\n//   }\n//   if (question_type) {\n//     apiUrl = apiUrl.concat(`&type=${question_type}`);\n//   }\n//   const { response, loading } = Axios({ url: apiUrl });\n//   const [questionIndex, setQuestionIndex] = useState(0);\n//   const [options, setOptions] = useState([]);\n//   useEffect(() => {\n//     if (response?.results.length) {\n//       const question = response.results[questionIndex];\n//       let answers = [...question.incorrect_answers];\n//       answers.splice(\n//         getRandomInt(question.incorrect_answers.length),\n//         0,\n//         question.correct_answer\n//       );\n//       setOptions(answers);\n//     }\n//   }, [response, questionIndex]);\n//   if (loading) {\n//     return (\n//       <Box mt={20}>\n//         <CircularProgress />\n//       </Box>\n//     );\n//   }\n//   // This is for a answer button\n//   const handleClickAnswer = (event) => {\n//     const question = response.results[questionIndex];\n//     if (event.target.textContent === question.correct_answer) {\n//       dispatch(handleScoreChnage(score + 1));\n//     }\n//     if (questionIndex + 1 < response.result.length) {\n//       setQuestionIndex(questionIndex + 1);\n//     } else {\n//       history.push(\"/score\");\n//     }\n//   };\n//   return (\n//     <Box>\n//       <Typography variant=\"h4\">Questions {questionIndex + 1}</Typography>\n//       <Typography mt={5}>\n//         {decode(response.result[questionIndex].question)}\n//       </Typography>\n//       {options.map((data, id) => (\n//         <Box mt={2} key={id}>\n//           <Button onClick={handleClickAnswer} variant=\"contained\">\n//             {decode(data)}\n//           </Button>\n//         </Box>\n//       ))}\n//       <Box mt={5}>\n//         <Button>\n//           Score: {score} / {response.results.length}\n//         </Button>\n//       </Box>\n//     </Box>\n//   );\n// };\n// export default Question;\nimport React from \"react\";\nimport { Button, CircularProgress, Typography } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport { decode } from \"html-entities\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router\";\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport List from '@mui/material/List';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport useAxios from \"../hooks/Axios\";\nimport { handleScoreChnage } from \"../Redux/action\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst getRandomInt = max => {\n  return Math.floor(Math.random() * Math.floor(max));\n};\n\nconst Questions = () => {\n  _s();\n\n  const {\n    question_category,\n    question_difficulty,\n    question_type,\n    amount_of_question,\n    score,\n    name,\n    question_answers\n  } = useSelector(state => state);\n  const history = useHistory();\n  const dispatch = useDispatch();\n  let apiUrl = `/api.php?amount=${amount_of_question}`; // if (question_category) {\n  //   apiUrl = apiUrl.concat(`&category=${question_category}`);\n  // }\n  // if (question_difficulty) {\n  //   apiUrl = apiUrl.concat(`&difficulty=${question_difficulty}`);\n  // }\n  // if (question_type) {\n  //   apiUrl = apiUrl.concat(`&type=${question_type}`);\n  // }\n\n  useEffect(() => {\n    console.log(\"inital : \", question_answers);\n  }, []);\n  const {\n    response,\n    loading\n  } = useAxios({\n    url: apiUrl\n  });\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const [options, setOptions] = useState([]);\n  const [selectedIndex, setSelectedIndex] = React.useState(1);\n\n  const handleListItemClick = number => {\n    setSelectedIndex(number);\n  };\n\n  useEffect(() => {\n    if (question_answers !== null && question_answers !== void 0 && question_answers.length) {\n      const question = question_answers[questionIndex];\n      console.log(\"question \", question.answers);\n      let answers = [];\n\n      for (const [key, value] of Object.entries(question.answers)) {\n        console.log(\"values\", value);\n        if (value) answers.push({\n          [key]: value\n        });\n      }\n\n      answers.splice(getRandomInt(question.answers.length), 0 // question.correct_answer\n      );\n      setOptions(answers);\n    }\n  }, [question_answers, questionIndex]);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      mt: 20,\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this);\n  }\n\n  const handleClickAnswer = (event, next) => {\n    const question = question_answers[questionIndex];\n\n    if (event.target.name === question.correct_answer) {\n      dispatch(handleScoreChnage(score + 1));\n    }\n\n    if (next && questionIndex + 1 < question_answers.length) {\n      setQuestionIndex(questionIndex + 1);\n    } else {// history.push(\"/score\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        children: [\"Welcome \", name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        children: [\"Questions \", questionIndex + 1 + \"/\" + question_answers.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        minWidth: 245\n      },\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          mt: 5,\n          children: question_answers[questionIndex].question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }, this), options.map((data, id) => /*#__PURE__*/_jsxDEV(Box, {\n          mt: 2,\n          children: /*#__PURE__*/_jsxDEV(List, {\n            component: \"nav\",\n            \"aria-label\": \"main mailbox folders\",\n            children: /*#__PURE__*/_jsxDEV(ListItemButton, {\n              sx: {\n                border: \"1px solid black\"\n              },\n              name: Object.keys(data),\n              selected: selectedIndex == id,\n              onClick: event => {\n                handleListItemClick(id); // handleClickAnswer(event) \n              },\n              children: /*#__PURE__*/_jsxDEV(ListItemText, {\n                primary: Object.values(data)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 241,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 15\n          }, this)\n        }, id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(Box, {\n          mt: 5,\n          children: [\"Score: \", score, \" / \", question_answers.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            display: \"flex\",\n            width: \"100%\",\n            justifyContent: \"space-between\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              onClick: e => {\n                handleClickAnswer(e, true);\n              },\n              variant: \"contained\",\n              size: \"medium\",\n              children: \"NEXT\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 255,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Questions, \"ZOswcNJrO0ZjQ0eBwe8mBygTqQM=\", false, function () {\n  return [useSelector, useHistory, useDispatch, useAxios];\n});\n\n_c = Questions;\nexport default Questions;\n\nvar _c;\n\n$RefreshReg$(_c, \"Questions\");","map":{"version":3,"sources":["/home/deepak/Videos/quiz-app/src/Pages/Question.jsx"],"names":["React","Button","CircularProgress","Typography","Box","decode","useEffect","useState","useDispatch","useSelector","useHistory","Card","CardActions","CardContent","List","ListItemButton","ListItemIcon","ListItemText","useAxios","handleScoreChnage","getRandomInt","max","Math","floor","random","Questions","question_category","question_difficulty","question_type","amount_of_question","score","name","question_answers","state","history","dispatch","apiUrl","console","log","response","loading","url","questionIndex","setQuestionIndex","options","setOptions","selectedIndex","setSelectedIndex","handleListItemClick","number","length","question","answers","key","value","Object","entries","push","splice","handleClickAnswer","event","next","target","correct_answer","minWidth","map","data","id","border","keys","values","e"],"mappings":"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","sourcesContent":["// import React, { useState, useEffect } from \"react\";\n\n// import { Box, Button, CircularProgress, Typography } from \"@mui/material\";\n\n// import { decode } from \"html-entities\";\n\n// import Axios from \"../hooks/Axios\";\n\n// import { useSelector, useDispatch } from \"react-redux\";\n// import { useHistory } from \"react-router-dom\";\n\n// import { handleScoreChnage } from \"../Redux/action\";\n\n// //this function is for generating a random numbers\n\n// const getRandomInt = (max) => {\n//   return Math.floor(Math.random() * Math.floor(max));\n// };\n\n// const Question = () => {\n//   const {\n//     question_category,\n//     question_difficulty,\n//     question_type,\n//     amount_of_question,\n//     score,\n//   } = useSelector((state) => state);\n\n//   const history = useHistory();\n//   const dispatch = useDispatch();\n\n//   let apiUrl = `/api.php?amount=${amount_of_question}`;\n\n//   if (question_category) {\n//     apiUrl = apiUrl.concat(`&category=${question_category}`);\n//   }\n\n//   if (question_difficulty) {\n//     apiUrl = apiUrl.concat(`&difficulty=${question_difficulty}`);\n//   }\n\n//   if (question_type) {\n//     apiUrl = apiUrl.concat(`&type=${question_type}`);\n//   }\n\n//   const { response, loading } = Axios({ url: apiUrl });\n\n//   const [questionIndex, setQuestionIndex] = useState(0);\n//   const [options, setOptions] = useState([]);\n\n//   useEffect(() => {\n//     if (response?.results.length) {\n//       const question = response.results[questionIndex];\n\n//       let answers = [...question.incorrect_answers];\n\n//       answers.splice(\n//         getRandomInt(question.incorrect_answers.length),\n//         0,\n//         question.correct_answer\n//       );\n//       setOptions(answers);\n//     }\n//   }, [response, questionIndex]);\n\n//   if (loading) {\n//     return (\n//       <Box mt={20}>\n//         <CircularProgress />\n//       </Box>\n//     );\n//   }\n\n//   // This is for a answer button\n//   const handleClickAnswer = (event) => {\n//     const question = response.results[questionIndex];\n\n//     if (event.target.textContent === question.correct_answer) {\n//       dispatch(handleScoreChnage(score + 1));\n//     }\n//     if (questionIndex + 1 < response.result.length) {\n//       setQuestionIndex(questionIndex + 1);\n//     } else {\n//       history.push(\"/score\");\n//     }\n//   };\n\n//   return (\n//     <Box>\n//       <Typography variant=\"h4\">Questions {questionIndex + 1}</Typography>\n//       <Typography mt={5}>\n//         {decode(response.result[questionIndex].question)}\n//       </Typography>\n//       {options.map((data, id) => (\n//         <Box mt={2} key={id}>\n//           <Button onClick={handleClickAnswer} variant=\"contained\">\n//             {decode(data)}\n//           </Button>\n//         </Box>\n//       ))}\n//       <Box mt={5}>\n//         <Button>\n//           Score: {score} / {response.results.length}\n//         </Button>\n//       </Box>\n//     </Box>\n//   );\n// };\n\n// export default Question;\nimport React from \"react\";\nimport { Button, CircularProgress, Typography } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\n\nimport { decode } from \"html-entities\";\n\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router\";\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport List from '@mui/material/List';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport useAxios from \"../hooks/Axios\";\n\nimport { handleScoreChnage } from \"../Redux/action\";\n\nconst getRandomInt = (max) => {\n  return Math.floor(Math.random() * Math.floor(max));\n};\n\nconst Questions = () => {\n  const {\n    question_category,\n    question_difficulty,\n    question_type,\n    amount_of_question,\n    score,\n    name,\n    question_answers\n  } = useSelector((state) => state);\n\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  let apiUrl = `/api.php?amount=${amount_of_question}`;\n\n  // if (question_category) {\n  //   apiUrl = apiUrl.concat(`&category=${question_category}`);\n  // }\n\n  // if (question_difficulty) {\n  //   apiUrl = apiUrl.concat(`&difficulty=${question_difficulty}`);\n  // }\n\n  // if (question_type) {\n  //   apiUrl = apiUrl.concat(`&type=${question_type}`);\n  // }\n  useEffect(() => {\n    console.log(\"inital : \", question_answers)\n  }, [])\n\n  const { response, loading } = useAxios({ url: apiUrl });\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const [options, setOptions] = useState([]);\n  const [selectedIndex, setSelectedIndex] = React.useState(1);\n\n  const handleListItemClick = (\n    number\n  ) => {\n    setSelectedIndex(number);\n  };\n  useEffect(() => {\n    if (question_answers?.length) {\n      const question = question_answers[questionIndex];\n      console.log(\"question \", question.answers)\n      let answers = []\n      for (const [key, value] of Object.entries(question.answers)) {\n        console.log(\"values\", value);\n\n        if (value)\n          answers.push({\n            [key]: value\n          })\n      }\n      answers.splice(\n        getRandomInt(question.answers.length),\n        0,\n        // question.correct_answer\n      );\n      setOptions(answers);\n    }\n  }, [question_answers, questionIndex]);\n\n  if (loading) {\n    return (\n      <Box mt={20}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  const handleClickAnswer = (event,next) => {\n    const question = question_answers[questionIndex];\n    if (event.target.name === question.correct_answer) {\n      dispatch(handleScoreChnage(score + 1));\n    }\n\n    if (next && questionIndex + 1 < question_answers.length) {\n      setQuestionIndex(questionIndex + 1);\n    } else {\n\n      // history.push(\"/score\");\n    }\n  };\n\n  return (\n    <>\n    <Box display={\"flex\"} justifyContent={\"space-between\"}>\n    <Typography variant=\"h4\">Welcome {name}</Typography>\n    <Typography variant=\"h4\">Questions {questionIndex + 1 + \"/\" + question_answers.length}</Typography>\n    </Box>\n    <Card  sx={{ minWidth: 245}}>\n      <CardContent>\n          <Typography mt={5}>\n            {/* {decode(response.results[questionIndex].question)} */}\n            {question_answers[questionIndex].question}\n          </Typography>\n          {options.map((data, id) => (\n            <Box  mt={2} key={id}>\n              <List  component=\"nav\" aria-label=\"main mailbox folders\">\n                <ListItemButton sx={{border:\"1px solid black\"}} name={Object.keys(data)}\n                  selected={selectedIndex == id}\n                  onClick={(event) =>{ handleListItemClick(id);\n                    // handleClickAnswer(event) \n                  }}\n                >\n                  <ListItemText primary={Object.values(data)} />\n                </ListItemButton>\n              </List>\n              {/* <Button name={Object.keys(data)} onClick={handleClickAnswer} variant=\"contained\">\n            {Object.values(data)}\n          </Button> */}\n            </Box>\n          ))}\n          <Box mt={5}>\n            Score: {score} / {question_answers.length}\n          </Box>\n          <CardActions >\n            <Box display={\"flex\"} width={\"100%\"} justifyContent={\"space-between\"}>\n          {/* <Button variant=\"contained\" size=\"medium\">PREV</Button> */}\n        <Button onClick={(e)=>{handleClickAnswer(e,true)}} variant=\"contained\" size=\"medium\">NEXT</Button>\n        </Box>\n      </CardActions>\n      </CardContent>\n    </Card>\n    </>\n  );\n};\n\nexport default Questions;\n"]},"metadata":{},"sourceType":"module"}